	->>>  CHOROPLETH MAPS  <<<-

Reference: (functions and arguments)
https://plot.ly/python/reference/#choropleth

Some examples:
https://plot.ly/python/offline/

Cheatsheet:
https://images.plot.ly/plotly-documentation/images/python_cheat_sheet.pdf

Initialization
	import plotly.plotly as py
		(imports Plotly)
	import plotly.graph_objs as go
		(imports specific function)
	from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
		(imports functions to the offline mode)
	init_notebook_mode(connected=True)
		(automatically shows off the plots in Jupyter notebook)

	-> More initialization options on Plotly: https://plot.ly/python/offline/

Input data (dictionary)
	In Cloropeth, the basic 'data' input is a dictionnary where the locations and the
	map type are stated.
	
	Input Data (creates a 'data' type variable for Choropleth)
		input1 = dict(type = 'choropleth',locations = ['AZ','CA','NY'], locationmode = "USA-states",
					  colorscale = 'Portland',text = ['text1','text2','text3'],z = [1.0,2.0,3.0],
					  colorbar = {'title':'Colorbar Title Goes Here'})
			-> the 'type' argument allows us to se 'choropleth' as our data type
			-> locations arguments expects a list of strings with the specific location codes
			   of the location to be plotted, in this case: Arizona, California and New York
			   A column of a dataframe can be introduced here by stating: z = df['colcat']
			   Other code types: 'AFG', 'ALB', 'DZA' for Afghanistan, Albania and Algeria
			   (works with the worldwide locationmode, which is the default)
			-> locationmode argument create expects a string of the location type (which will
			   affect the 'locations' argument). In our example, the location mode is 'USA with
			   the states printed'. Many others, as "country names" can be found
			-> The argument z expects a list of values the same size as the list introduced in
			   'locations', and in the example sets the values of each state  1, 2 and 3.
			   A column of a dataframe can be introduced here by stating 'z=df['colnum']'
			   (this values are the printed parts)
			-> The argument 'text' sets the text to be shown for each of the locations stated,
			   and expects a list of strings the same length of the one stated in 'locations'
			-> The argument 'colorscale' sets the color mapping of the plot to the string 
			   mentioned.
			   Other colorscales: 'Portland', 'Jet', 'Greens', 'pairs', 'Greys', 'Bluered',
								  'Hot', 'Picnic', 'RdBu', 'Blackbody', 'Earth', 'Electric',
								  'YIOrRd', YIGnBu'
			-> The argument 'colorbar' sets the title of the graph
			
		*Other arguments that can be added to the input data:
			-> marker = dict(line=dict(color='rgb(255,255,255)',width=2)): sets the color and width
																		  of the map borders to the
																		  ones specified as strings
			-> reversescale = True/False : reverses the scale of the colors (False is the default)
			
	Layout (creates a 'layout' variable for Choropleth)
		layout1 = dict(title = 'Title',geo = dict(scope = 'usa'))
			-> title sets the title as the string indicated
			-> the variable 'geo' allows to set all geographic properties (works like a dictionnary,
			   associating properties to inputs
			-> Other possible arguments for geo:
				- projection = {'type':'mercator'}
					geo = dict(projection = {'type':'mercator'}) sets the projection to mercator
						Other projection types: 'equirectangular', 'orthographic', 'natural earth',
						'kavrayskiy7', 'stereographic'
				- showframe = True/False : shows or not the frame of the layout
				- showlakes = True/False : shows or not the lakes in the map
				- lakecolor = 'rgb(85,173,240)' : sets the colors of the lakes to the ones specified
		
	Print graph (creates a Choropleth 'map' data from 'input' and 'layout' data)
		map = go.Figure(data = [input1],layout = layout1)
			-> Creates a map figure from the parents data1 and layout1, and plots it
		iplot(map)
			-> Plots an interactive choropleth map inside the Jupyter notebook
		plot(map)
			-> Plots an HTML file with the data on map		
		
