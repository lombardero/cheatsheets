---> PYTORCH LOADING DATA <---


Basic loading
    data = torch.load('file')
        -> Loads whatever data is in the specified file
    
Iterable (DataLoad)
    dataloader = toch.utils.data.Dataloader(dataset, batch_size = bs,
                                      shuffle = True,
                                      num_workers = n)
        -> creates a generator function that loops through the dataset
           in batches. Every next() call goes through a new iteration of
           the set.
        -> batch_size fixes the size of the batches used for updating the
           weights; each batch contains bs tuples with the image and the 
           label
        -> shuffle = True means that each time the iterations are completed
           (every epoch), the data is shuffled randomly
        -> num_workers lets you divide the processing into n multiprocessing
           lworkers to improve performance
    for batch , (train,label) in enumerate(dataloader)
        -> iterates through batches and training data (equivalent to 2 for loops)
           https://pytorch.org/docs/stable/data.html
    iter(dataloader)
        -> allows the dataloader pytorch object to be iterable; the 'next()' function
           can be called
    iter(dataloader).next()
        -> returns one iteration, which consists of a list of two tensors:
            · the first is a torch 4-Dimensional tensor,
              ([batch_size, C, H, W]) (list of inputs in the batch)
            · the second is a torch 1-Dimensional tensor, with
              the labels of each of the elements in the batch
              (size is batch_size)
