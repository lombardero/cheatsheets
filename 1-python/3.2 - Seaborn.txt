	->>>  SEABORN LIBRARY  <<<-

Seaborn is a statistical plotting library built on top of Matplotlib, and works really
well with Pandas dataframes objects.
Check out:
http://seaborn.pydata.org/api.html
http://seaborn.pydata.org/examples/index.html
https://github.com/mwaskom/seaborn

For more info: 

import seaborn as sns
%matplotlib inline (to see the visualisations after each line of code in Jupyter Notebook)
df = sns.load_dataset('name') - Imports Seaborn built-in datasets 

Distribution plots
	Rugplot: univariate plot that shows a dashmark for each number in the dataset in an axis
		sns.rugplot(df('colx')): plots a line for each case of data in an unidirectional axis
	
			Explanation of kde plot: https://en.wikipedia.org/wiki/Kernel_density_estimation#Practical_estimation_of_the_bandwidth
			A kde plot is made by adding a gaussian distribution to each kernel with standard
			deviation of ((4*sigma.dataset**5)/(3*size.dataset))**.2
			
	Distplot: used to plot a single numerical dataset (histogram)
		sns.distplot(df['colx']): plots one single value of the dataframe df (the one in 
								  'colx'), as a histogram and a kernel density estimation
		sns.distplot(df['icol'],kde=False): removes the kde line (and only shows the hist.)
		sns.distplot(df['icol'],bins=n): sets the number of bins (columns of the histogram
										 to n

	Jointplot: used to plot two numerical datasets and compare them
		sns.jointplot(x='col1',y='col2',data=df): plots the scatter plot comparison of two
												  variables of the dataframe df (the ones in
												  the columns 'col1' and 'col2'), with both
												  histograms
		sns.jointplot(x='col1',y='col2',data=df,kind='hex'): modifies the scatter plot (deflt)
															 for a hexagonal density plot
		sns.jointplot(x='col1',y='col2',data=df,kind='reg'): adds a linear regression line into
															 the scatter point data
		sns.jointplot(x='col1',y='col2',data=df,kind='kde'): modifies the scatter, placing only
															 kde lines (2-dimensional in the center)
	
	Pairplot: plots a comparison (shape of a matrix) of each numerical value of the dataframe
		sns.pairplot(df): plots a graph matrix of jointplots between all possible numerical
						  columns in the dataframe df, putting the histograms of each variable
						  in the diagonal
		sns.pairplot(df,hue='catcol'): will plot all distribution coloring the categories
									   indicated in the categorical (not numerical) columns
									   'catcol'
		sns.pairplot(df,hue='catcol',palette='name'): uses the color palette specified				   

Categorical plots
	Barplot: general plot aggregating the data based on some function (mean is the default)
		sns.barplot(x='colcat',y='colnum',data=df): shows the average (by default) of the
													numerical data in 'colnum' divided by
													category in the 'colcat' column inside
													the dataframe df
		We can introduce any function instead of the default, for example standard deviation:
	import numpy as np #to introduce the formula of the standard deviation
	sns.barplot(x='colcat',y='colnum',data=df,estimator=np.std): shows the standard deviation
																 for each category in 'colcat'
	
	Countplot: same as barplot but the figure is plotting the number of occurrences
		sns.countplot(x='colcat',data=df): plots the total occurrences for each category in
										   column 'colcat' of dataframe df
		sns.countplot(x='colcat',data=df, hue='colcal2'): plots the total occurrencies for each
														  category in 'colcat', in small plots
														  divided by all categories in column
														  'colcat2'
	
	Boxplot: shows the quartiles of a numerical value for each category
		sns.boxplot(x='colcat',y='colnum',data=df): plots the quartiles of the data in 'colnum'
													for each category in 'colcat' inside df.
													Points too far away from distribution are
													shown outliers (too far from distribution)
		sns.boxplot(x='colcat',y='colnum1',data=df,hue='colnum2'): plots two numerical datasets
																   distributions('colnum1' & 
																   'colnum2') per one category
																   ('colcat'), allowing to compare
																   them easily
	Violinplot: shows the kernel distribution of the numerical data per category
		sns.violinplot(x='colcat',y='colnum',data=df): plots the kernel ditributions of the 
													   numerical dataset 'colnum' per category in
													   'colcat' inside df
		sns.violinplot(x='colcat',y='colnum',data=df,hue='colnum2'): plots two numerical kernel
																	 distributions ('colnum1' & 
																	 'colnum2')for each category
																	 in 'colcat'
		sns.violinplot(x='colcat',y='colnum',data=df,hue='colnum2',split=True): allows to 'split'
																	 the violin and shown the 
																	 distribution in 'colnum'
																	 at one side and the one in
																	 'colnum' at the other
		
	Stripplot: introduces a scatter of numerical occurrences in an axis per category
		sns.stripplot(x='colcat',y=colnum,data=df): shows the numerical scatter (in an axis) of 
													the data in 'colnum' for each category in
													'colcat' in df
		sns.stripplot(x='colcat',y=colnum,data=df,jitter=True): 'jitter' adds random x-axis 'noise'
																to allow the scatter points to be 
																visualised in a thicker band instead
																of a line (sometimes there are a lot
																of points one on top of each other in
																a single axis line)
		sns.stripplot(x='colcat',y=colnum,data=df,hue='colnum2'): shows a second numerical variable
																  'colnum2' in the stripplot (it 
																  overlays it)
		sns.stripplot(x='colcat',y=colnum,data=df,hue='colnum2',split=True): shows the second numerical
																			 distribution in 'colnum2'
																			 by adding a second line per
																			 category (avoiding overlay)
					
	Swarmplot: combination of scatter and violin plots
		sns.swarmplot(x='colcat',y='colnum',data=df): plots all the dataset points, placing them in the width
													  when there are many close values. The numerical cases
													  follow the axis of 'colnum', and the cases are distributed
													  in 'colcat' categories from dataframe df
		sns.swarmplot(x='colcat',y='colnum',data=df,color='black'): plots all the dataset points in black
			Bad thing: for large datasets, the plot becomes weird and it takes too much computation time
					   (therefore not recommended for large datasets)
	
	Factorplot: plots any kind of plot (specified in the 'kind' argument)
		sns.factorplot(x='colcat',y='colnum',data=df,kind='bar'): plots a barplot (as specified in the 'kind'
																  argument)

Matrix Plots: creates matrix heatmaps (the data must be in matrix form: only one numerical variable on the
			  rows and cols)
	Heatmaps
		sns.heatmap(df): creates a matricial heatmap (df must be a matricial dataframe)
		sns.heatmap(df,annot=True): will add numarical values of each square of the matricial plot
		sns.heatmap(df,cmap='coolwarm'): changes the color mapping to 'coolwarm' (there are lots of others, such as
									 'magma')
		sns.heatmap(df,linecolor='white',linewidths=1): adds a line separation of width 1 from all the plot cells
													and colors that line 'white'
	
	Clustermap: creates a clustered heatmap (joining rows and cols by their similarity)
		sns.clustermap(df): creates a clustered heatmap of the matricial dataframe df, placing together similar rows
						 and columns and showing the similarity levels
		sns.clustermap(df,cmap='coolwarm'): modifies the color mapping to the one selected
		sns.clustermap(df,standard_scale=1): normalizes the scale (min dataset=0, max dataset=1)

Grids: creates a correlation grid with the numerical data on a dataframe (similar to pairplot)
	g = sns.PairGrid(df): identifyes the numerical columns in df and creates an empty grid of graphs for all numerical
						  columns (puts them in rows and columns to compare them)
						  The plots are then based on the g grid object created
	g.map(plt.scatter): makes a scatter comparing all numerical data by pairs (the elements on the diagonal are
						straight lines of data, resulting from comparing the data to itself)
	
	To specify which type of plot for each position of the grid:
		g.map_siag(sns.distplot): plots distplots in the diagonal
		g.map_upper(plt.scatter): plots a scatter in the upper part of the grid (which is symetrical to the lower part)
		g.map_lower(sns.kdeplot): plots a kernel distribution plot on the lower part of the grid
	
	gcat = sns.FacetGrid(data=df,col='colcat1',row='colcat2'): creates a grid with only the categorical columns of df
														    specified ('colcat1' & 'colcat2') for plotting a numerical 
															dataset in and see how the categories affect that particular
															numerical distribution
															Example: 
															'colcat1': Smoker: 'Yes','No'
															'colcat2': Time: 'Morning', 'Afternoon', 'Night'
															-> gcat will have a grid of 3 rows by 2 columns (total 6 graphs)
	gcat.map(sns.distplot,'colnum'): plots a distplot using the data in 'colnum' for each category specified in gcat
	gcat.map(plt.scatter,'colnum1','colnum2'): plots a scatter of the two numerical variables specified for each of the
											   elements on the grid gcat

Regression Plots
	LM plot
		sns.lmplot(x='colnum1',y='colnum2',data=df): creates a scatter plot comparing the numerical data on 'colnum1' 
													 (x axis) and 'colnum2' (y axis) and adds a linear regression
		sns.lmplot(x='colnum1',y='colnum2',data=df,hue='colcat'): separates the numerical data by each category on 
																  'colcat', adding a linear regression line for
																  each category
		sns.lmplot(x='colnum1',y='colnum2',data=df,hue='colcat',markers=['o','v']): changes the markers of each category
																					to 'o' and 'v' (from matplotlib library)
		sns.lmplot(x='colnum1',y='colnum2',data=df,scatter_kws={'s':100}): sets the size of the markers to 100.
																		   We are calling Matplotlib 'scatter_kws' dictionnary
																		   (which is the one affecting to scatter plots) to 
																		   change the size (many other things can be done like in
																		   matplotlib, check documentation)
		sns.lmplot(x='colnum1',y='colnum2',data=df,col='colcat'): creates a grid of plots with one category in 'colcat' per
																  column with the numerical data on each category as a scatter
																  with linear regression
																  A 'row' argument can also be added to separate the data
																  even more
																  A hue element can be added to show another category apart
																  from the ones in the grid
		sns.lmplot(x='colnum1',y='colnum2',data=df,aspect=a,size=s): changes the aspect of the grid (s=standardized size
																	 a=(size of x axis)/(size of y axis) )

Style and Color
	Background
		sns.set_stlye('stl'): sets a stlye of the background of the grid for the entire notebook. 
						     The 'stl' argument can be:'darkgrid', 'whitegrid', 'dark', 'white', or 'ticks'
		sns.despine(): removes the top and right 'lines' of the grid, leaving only the x and y axis painted
				       -> by default, it removes only the top and right spines
		sns.despine(left=True,bottom=True): removes all the spines (lines of the grid)
	
	Plot size: all plot sizes can be changed through introducing arguments on each plot
		-> Important note: the command shall be placed BEFORE the command that executes the plot
		plt.figure(figsize=(12,3)): the Matplotlib method works for Seaborn also
									here, we set the ratio size of the figure to 12 horizontal, 3 vertical
		plt.tight_layout(): makes the size of the plot big enough to touch the edges
		
		sns.set_context('poster'): specifically sets the figure size to match different purposes such as 'notebook' (default)
								   'paper', 'talk', and 'poster' (like the example)
		sns.set_context('poster',font_scale=s): modifies the font size of the graph to s (1 is default)
	
	Pallets & Colors
		colormaps to introduce as palette='string': https://matplotlib.org/examples/color/colormaps_reference.html
	
	Titles: use the Matplotlib documentation
		plt.title('Title'): adds the title specified in the string
		